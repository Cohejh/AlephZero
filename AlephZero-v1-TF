{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8775854,"sourceType":"datasetVersion","datasetId":5274510}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**I'm going to make this the most documented code I have ever written, because this is quite a hard project.**","metadata":{}},{"cell_type":"markdown","source":"# Chess AI Project\nResources that might come in handy:\n- https://www.chessprogramming.org/Main_Page\n- https://www.chessprogramming.org/NNUE\n- https://deepmind.google/discover/blog/alphazero-shedding-new-light-on-chess-shogi-and-go/\n- https://stockfishchess.org/blog/2020/introducing-nnue-evaluation/","metadata":{}},{"cell_type":"code","source":"from IPython.display import SVG, display\n\ndef play_game(ai_function):\n    board = chess.Board()\n\n    while board.outcome() is None:\n        display(SVG(board._repr_svg_()))\n\n        if board.turn == chess.WHITE:\n            user_move = input('Your move: ')\n            if user_move == 'quit':\n                break\n            while user_move not in [str(move) for move in board.legal_moves]:\n                print('That wasn\\'t a valid move. Please enter a move in Standard Algebraic Notation')\n                user_move = input('Your move: ')\n            board.push_san(user_move)\n\n        elif board.turn == chess.BLACK:\n            ai_move = ai_function(board.fen())\n            print(f'AI move: {ai_move}')\n            board.push_san(ai_move)\n    print(board.outcome())","metadata":{"execution":{"iopub.status.busy":"2024-06-24T17:00:30.267409Z","iopub.execute_input":"2024-06-24T17:00:30.268382Z","iopub.status.idle":"2024-06-24T17:00:30.276221Z","shell.execute_reply.started":"2024-06-24T17:00:30.268332Z","shell.execute_reply":"2024-06-24T17:00:30.275232Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Problem 1: Board Representation\nAI can't understand FEN notation/chess board, so we need to make it a **matrix/tensor**.\n\nGood luck future me.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"!pip install chess","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:56:22.138698Z","iopub.execute_input":"2024-06-24T16:56:22.139010Z","iopub.status.idle":"2024-06-24T16:56:36.137877Z","shell.execute_reply.started":"2024-06-24T16:56:22.138985Z","shell.execute_reply":"2024-06-24T16:56:36.136754Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport chess\n\ndef one_hot_encode_peice(piece):\n    pieces = list('rnbqkpRNBQKP.')\n    arr = np.zeros(len(pieces))\n    piece_to_index = {p: i for i, p in enumerate(pieces)}\n    index = piece_to_index[piece]\n    arr[index] = 1\n    return arr\n\none_hot_encode_peice('b')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-24T16:56:36.139998Z","iopub.execute_input":"2024-06-24T16:56:36.140754Z","iopub.status.idle":"2024-06-24T16:56:36.267016Z","shell.execute_reply.started":"2024-06-24T16:56:36.140710Z","shell.execute_reply":"2024-06-24T16:56:36.266010Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def encode_board(board):\n    board_str = str(board)\n    board_str = board_str.replace(' ', '')\n    board_list = []\n    for row in board_str.split('\\n'):\n        row_list = []\n        for piece in row:\n            row_list.append(one_hot_encode_peice(piece))\n        board_list.append(row_list)\n    return np.array(board_list)\n\nencode_board(chess.Board())","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:56:36.268279Z","iopub.execute_input":"2024-06-24T16:56:36.268603Z","iopub.status.idle":"2024-06-24T16:56:36.285484Z","shell.execute_reply.started":"2024-06-24T16:56:36.268574Z","shell.execute_reply":"2024-06-24T16:56:36.284625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ntrain_df = pd.read_csv('/kaggle/input/train-chess/train.csv', index_col='id')\nval_df = train_df[-1000:]\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:56:36.287592Z","iopub.execute_input":"2024-06-24T16:56:36.287892Z","iopub.status.idle":"2024-06-24T16:56:36.825136Z","shell.execute_reply.started":"2024-06-24T16:56:36.287868Z","shell.execute_reply":"2024-06-24T16:56:36.824135Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\ndef encode_fen_string(fen_str):\n    board = chess.Board(fen=fen_str)\n    return encode_board(board)\n\nX_train = np.stack(train_df['board'].apply(encode_fen_string))\ny_train = train_df['black_score']\nX_val = np.stack(val_df['board'].apply(encode_fen_string))\ny_val = val_df['black_score']","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:56:36.826239Z","iopub.execute_input":"2024-06-24T16:56:36.826508Z","iopub.status.idle":"2024-06-24T16:57:07.281643Z","shell.execute_reply.started":"2024-06-24T16:56:36.826484Z","shell.execute_reply":"2024-06-24T16:57:07.280617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Building the model\nTraining...\n\n**With a library**, Clement Jin. It is not cheating. It's a bit like saying you yourself have to discover all the axioms of Maths, before you can actually solve a problem.\n\n**THEY CAN NEVER READ THIS**","metadata":{}},{"cell_type":"code","source":"!pip install tensorflow","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:57:07.282776Z","iopub.execute_input":"2024-06-24T16:57:07.283106Z","iopub.status.idle":"2024-06-24T16:57:22.445160Z","shell.execute_reply.started":"2024-06-24T16:57:07.283079Z","shell.execute_reply":"2024-06-24T16:57:22.444238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\n\nmodel = Sequential([\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dense(1),\n])\n\nmodel.compile(\n    optimizer='rmsprop',\n    loss='mean_squared_error')","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:57:22.446607Z","iopub.execute_input":"2024-06-24T16:57:22.446920Z","iopub.status.idle":"2024-06-24T16:57:34.901703Z","shell.execute_reply.started":"2024-06-24T16:57:22.446891Z","shell.execute_reply":"2024-06-24T16:57:34.900731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(\n    X_train,\n    y_train,\n    epochs=20,\n    validation_data=(X_val, y_val))","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:57:34.903071Z","iopub.execute_input":"2024-06-24T16:57:34.903440Z","iopub.status.idle":"2024-06-24T16:59:05.476700Z","shell.execute_reply.started":"2024-06-24T16:57:34.903405Z","shell.execute_reply":"2024-06-24T16:59:05.475940Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.legend()\nplt.title('Loss During Training')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:59:05.477946Z","iopub.execute_input":"2024-06-24T16:59:05.478229Z","iopub.status.idle":"2024-06-24T16:59:05.802631Z","shell.execute_reply.started":"2024-06-24T16:59:05.478205Z","shell.execute_reply":"2024-06-24T16:59:05.801811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def play_nn(fen, show_move_evaluations=False, player='b'):\n    board = chess.Board(fen=fen)\n\n    moves = []\n    for move in board.legal_moves:\n        candidate_board = board.copy()\n        candidate_board.push(move)\n        input_vector = encode_board(str(candidate_board)).astype(np.int32).flatten()\n        \n        score = model.predict(np.expand_dims(input_vector, axis=0), verbose=0)[0][0]\n        moves.append((score, move))\n        if show_move_evaluations:\n            print(f'{move}: {score}')\n    \n    best_move = sorted(moves, reverse=player=='b')[0][1]\n\n    return str(best_move)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:59:12.886114Z","iopub.execute_input":"2024-06-24T16:59:12.886974Z","iopub.status.idle":"2024-06-24T16:59:12.893570Z","shell.execute_reply.started":"2024-06-24T16:59:12.886939Z","shell.execute_reply":"2024-06-24T16:59:12.892665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Play","metadata":{}},{"cell_type":"markdown","source":"**Enjoy**","metadata":{}},{"cell_type":"code","source":"play_game(play_nn)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}